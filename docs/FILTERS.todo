FILTERS-table, req'd:


for EVENT list, FILTERS service must be aware of join table FILTERS_EVENT
  @JsonSerialize(using=CustomIdEventListSerializer.class)
  private EventList events;

for AUTHORS list, FILTERS service must be aware of join table FILTERS_AUTHOR table
  private PublicKeyList authors;

for KINDS list, FILTERS service must be aware of join table FILTERS_KIND table
  private KindList kinds;

for referencedEvents, FILTERS service must be aware of join table FILTERS_EVENT
  @JsonProperty("#e")
  @JsonSerialize(using=CustomIdEventListSerializer.class)
  private EventList referencedEvents;

for referencePubKeys list, FILTERS service must be aware of join table FILTERS_AUTHOR table
  @JsonProperty("#p")
  private PublicKeyList referencePubKeys;

private Long since;
  unix timestamp

private Long until;
  unix timestamp

private Integer limit;
  maximum number of events relays SHOULD return in the initial query

NEEDS MORE INFO
    "#<(a-zA-Z)>": <tag values list
      #e: list of event ids
      #p: list of event pubkeys
  @Key(nip = 12)
  @JsonSerialize(using=CustomGenericTagQueryListSerializer.class)    
  @JsonDeserialize(using=CustomGenericTagQueryListDeserializer.class)    
  private GenericTagQueryList genericTagQueryList;

  for genericTagQueryList list, FILTERS service must be aware of join table TAGS table

~~~~

where filter structure is
  {
    "ids":
      <event ids list>,
    "authors": 
      <lowercase pubkeys list, the pubkey of an event must be one of these>,
    "kinds":
      <kind numbers list>,
    "#<single-letter (a-zA-Z)>":
      <tag values list.
        for #e — event ids list, 
        for #p — pubkeys list etc>,
    "since": 
      <integer unix timestamp in seconds, events must be newer than this to pass>,
    "until": 
      <an integer unix timestamp in seconds, events must be older than this to pass>,
    "limit": 
      <maximum number of events relays SHOULD return in the initial query>
  }

~~~~

AUTHOR table

~~~~

KIND table